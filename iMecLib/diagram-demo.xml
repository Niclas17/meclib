<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 1035974  -->
  <question type="stack">
    <name>
      <text>TM2 04 04 Zugversuch plastisch, Meclib</text>
    </name>
    <questiontext format="markdown">
      <text><![CDATA[**TM2 04 04**

<p hidden>[[input:objects]] [[validation:objects]]</p>
<p hidden>[[input:names]] [[validation:names]]</p>
<p>
[[jsxgraph width='500px' height='400px' input-ref-objects="stateRef" input-ref-names="fbd_names" ]]
// Version 2021 08 23
// set Input "objects" to type string and no validation
// set Input "names" to algebraic, no validation, allow floats
// defaults
JXG.Options.point.snapToGrid = true; // grid snap spoils rotated static objects
JXG.Options.point.snapSizeX = 0.1;
JXG.Options.point.snapSizeY = 0.1;
JXG.Options.point.fixed = true; // this is for static objects
JXG.Options.text.useMathJax = true;
JXG.Options.label.useMathJax = true;
JXG.Options.text.useMathJax = true;
JXG.Options.label.offset = [0, 0];
JXG.Options.label.anchorY = 'middle';
var a = 0.4; //compute this to match font size (grid-independent)
var pxunit = 1/40;
var labelshift = 0.2 * a;
// Style for nodes (supports, bars)
const nodeStyle = { fillcolor: 'white', strokeColor: 'black', size: 2, strokeWidth: 1.5 }; 
const pointStyle = { fillcolor: 'black', strokeColor: 'black', size: 1, strokeWidth: 1 };
// Style for bars
const barStyle = { strokewidth: 4, strokecolor: "black" };
// Set some linestyles
const normalStyle = { strokeWidth: 2, strokeColor: 'black', lineCap: 'round' };
const thinStyle = { strokeWidth: 1, strokeColor: 'black', lineCap: 'round' };
const inactiveColor = "gray";

const board = JXG.JSXGraph.initBoard(divid, {
  boundingbox: [-5, 5, 5, -5], //default values, use "grid" to customize
  axis: false, grid:true, showNavigation:false, showCopyright:true
});
var state;
var stateInput;
// make infobox optionally relative to a given point (define p.ref to [xref, yref])
board.highlightInfobox = function(x, y , el) {
    var ref = [0,0];
    var scale = [1,1];
    var dp = [1,1];
    if (typeof (el.ref) != 'undefined') {ref = el.ref}
    if (typeof (el.scale) != 'undefined') {scale = el.scale}
    if (typeof (el.dp) != 'undefined') {dp = el.dp}
    this.infobox.setText( 
        '('+((parseFloat(x)-ref[0])*scale[0]).toFixed(dp[0]) + ', ' + ((parseFloat(y)-ref[1])*scale[1]).toFixed(dp[1])+ ')')
};
// crosshair for reading off co-ordinates from graphs
// [ "crosshair", "", [x0, y0], [xref, yref], [xscale, yscale], [dpx, dpy] ]
class crosshair {
  constructor(data) {
    this.d = data;
    const f = 2, r = 7;
    const pp =  {size:0, name:'', fixed:false, snapToGrid:false, showInfobox:false};
    this.p = board.create('point', data[2], {
      name: '', fixed:false, size:r, fillOpacity:0, highlightFillOpacity:0, strokeWidth:1, color:"blue", snapToGrid:false
    });
    // set properties of infobox
    if (data[3]) { this.p.ref = data[3] }
    if (data[4]) { this.p.scale = data[4] }
    if (data[5]) { this.p.dp = data[5] }
    console.log(this.p.dp);
    
    this.p1 = board.create('point', plus(data[2],[-f*r*pxunit,0]),pp);
    this.p2 = board.create('point', plus(data[2],[+f*r*pxunit,0]), pp);   
    this.h = board.create('segment',  [this.p1, this.p2], {strokeWidth:1});
    this.p3 = board.create('point', plus(data[2],[0,-f*r*pxunit]), pp);
    this.p4 = board.create('point', plus(data[2],[0,+f*r*pxunit]), pp);   
    this.v = board.create('segment',  [this.p3, this.p4], {strokeWidth:1});
    board.create('group', [this.p, this.p1, this.p2, this.h, this.p3, this.p4, this.v] );
  }
  data() { var d = this.d; d[2] = [this.p.X(), this.p.Y()]; return d } 
  name() { return "0" }
}

// co-ordinate arrow with arrow with label 
// ["dir", "name", [x1,y1], angle]
// ["dir", "name", [x1,y1], angle, offset]
// ["dir", "name", [x1,y1], angle, offset, length]
class dir {
 constructor(data) {
   this.label = data[1];
   this.d =data;
   var le = 1.5*a;
   if (data.length >=5 ) {this.dist = data[4] } else {this.dist = 10}
   if (data.length >=6 ) { le = data[5] }
   if (this.dist >= 0) {this.name1 = ""; this.name2 = "\\("+this.label+"\\)" } else
     {this.name2 = ""; this.name1 = "\\("+this.label+"\\)" }
   // Arrow
   const a0 = data[3]*Math.PI/180;
   const off = data[4];
   const nx = Math.cos(a0);
   const ny = Math.sin(a0);
   const x2 = data[2][0]+le*nx;
   const y2 = data[2][1]+le*ny;
   this.p1 = board.create('point', data[2], { size: 0, name: this.name1, 
     label:{offset:[-6,this.dist], autoPosition:true}});
   this.p2 = board.create('point', [x2, y2], { size: 0, name: this.name2,
     label:{offset:[-6,this.dist], autoPosition:true}});
   this.vec = board.create('arrow', [this.p1, this.p2], { lastArrow: { type: 1, size: 6 } });
   this.vec.setAttribute(thinStyle);
 };
 data() { return this.d }; 
 name() { return "0" };
}

class force {
  constructor(data) {
    this.p1 = board.create('point', data[2], {
      name: '', fixed:false
    });
    this.p2 = board.create('point', data[3], {
      name: data[1], fixed:false, label:{offset:[10,10]}
    });
    this.vec = board.create('arrow', [this.p1, this.p2], {
      touchLastPoint: true, fixed:false
    });
  }
  data() {  return ["force", this.p2.name, [this.p1.X(), this.p1.Y()], [this.p2.X(), this.p2.Y()]  ] }
  name() { return this.p2.name.replace(/\s+/,"*") }
}
// grid control object: [ "grid", "xlabel", "ylabel",  xmin, xmax, ymin, ymax, pix ]
// grid control object: [ "grid", "xlabel", "ylabel",  xmin, xmax, ymin, ymax, pix, [fx, fy] ]
class grid {
 constructor(data) {
   this.d = data;
   const xmin = data[3];
   const xmax = data[4];
   const ymin = data [5];
   const ymax = data [6];
   const pix = data [7];
   var fx = 1, fy = 1;
   if (data[8]) {fx = data[8][0]; fy = data[8][1]};
   board.setBoundingBox([xmin, ymax, xmax, ymin ]);
   board.resizeContainer(pix*(xmax-xmin), pix*(ymax-ymin)); 
   a = 16/pix; 
   pxunit = 1/pix;
   labelshift = 0.2*a;
   //if (data[1] || data[2]) {board.removeGrids()};
   if (data[1]) { 
   		var xaxis = board.create('axis', [[0, 0], [1,0]], 
		  	{name:'\\('+data[1]+'\\)', withLabel: true,
				label: {position: 'rt', offset: [-25, 20]},
        ticks: {generateLabelValue:function(p1,p2) {return (p1.usrCoords[1]-p2.usrCoords[1])*fx}} });
      }
   if (data[2]) {  
   		var yaxis = board.create('axis', [[0, 0], [0,1]], 
		  	{name:'\\('+data[2]+'\\)', withLabel: true,
				label: {position: 'rt', offset: [-20, 0]},
        ticks: {generateLabelValue:function(p1,p2) {return (p1.usrCoords[2]-p2.usrCoords[2])*fy}} });    
      }   
   }
  
 data(){  return this.d }
 name(){  return "0" }
}
// Text label
class label {
 constructor(data){
   this.p = board.create('point', data[2], {    
     name:data[1] ,size:0, label:{offset:[0,0]}} );
   this.d=data;
 }
 data(){ return this.d }
 name(){  return "0" }
}


class moment {
  constructor(data) {
    this.p1 = board.create('point', data[2], {
      name: '', fixed:false
    });
    this.p2 = board.create('point', data[3], {
      name: '', fixed:false
    });
    this.p3 = board.create('point', data[4], {
      name: data[1], fixed:false, label:{offset:[10,10]}
    });
    this.arc = board.create('minorArc', [this.p1, this.p2, this.p3], {
      fixed: false,
      strokeWidth: 2,
      lastArrow: {
        type: 1,
        size: 5
      },
    });
    var g = board.create('group', [this.p1, this.p2, this.p3, this.arc]);
    g.removeTranslationPoint(this.p2);
    g.removeTranslationPoint(this.p3);
  }
  data() { return ["moment", this.p3.name,  [this.p1.X(), this.p1.Y()], [this.p2.X(), this.p2.Y()], [this.p3.X(), this.p3.Y()]  ]  }
  name() {return this.p3.name.replace(/\s+/,"*") }
}

// [ "spline", "eqn", [X0, Y0], [x1, y1], [x2,y2], [xt1, yt1], [xt2,yt2], style, status ]
class spline {
  constructor(data) {
    this.d = data;
    this.state = data[8];
    this.style = data[7];
    // global coordinates
    this.P = data[2]; // ref point
    var P1 = plus(this.P, data[3]);
    var P2 = plus(this.P, data[4]);
    var PT1 = plus(this.P, data[5]);
    var PT2 = plus(this.P, data[6]);
    var B1 = [P1[0], this.P[1]];
    var B2 = [P2[0], this.P[1]];  
    // points
    this.v1 = board.create('line',[P1,plus(P1,[0,1])], {visible:false, fixed:true});
    this.v2 = board.create('line',[P2,plus(P2,[0,1])], {visible:false, fixed:true});
    this.p1 = board.create('glider',[P1[0], P1[1],this.v1], { name: '', fixed: false ,size:6, color:'red',fillOpacity:0});
    this.p2 = board.create('glider',[P2[0], P2[1],this.v2], { name: '', fixed: false ,size:6, color:'red',fillOpacity:0});
    this.pt1 = board.create('point',PT1, { name: '', fixed: false, snapToGrid:false });
    this.pt2 = board.create('point',PT2, { name: '', fixed: false, snapToGrid:false });
    this.t1 = board.create('segment',[this.p1, this.pt1], {fixed:false, strokecolor:'black', strokewidth: 1});
    this.t2 = board.create('segment',[this.p2, this.pt2], {fixed:false, strokecolor:'black', strokewidth: 1});
    this.v1 = board.create('segment',[this.p1, [P1[0],this.P[1]]], {fixed:true, strokecolor:'black', strokewidth: 1});
    this.v2 = board.create('segment',[this.p2, [P2[0],this.P[1]]], {fixed:true, strokecolor:'black', strokewidth: 1});
    this.v3= board.create('segment',[[P1[0],this.P[1]], [P2[0],this.P[1]]], {fixed:true, strokecolor:'black', strokewidth: 1});
    //this.g1 = board.create('group', [this.p1, this.pt1] ).removeTranslationPoint(this.pt1);
    //this.g2 = board.create('group', [this.p2, this.pt2] ).removeTranslationPoint(this.pt2);
    this.graph = board.create('functiongraph', [hermiteplot(this.P,this.p1, this.p2, this.pt1, this.pt2), this.p1.X(), this.p2.X()], { strokecolor: 'red', strokewidth: 3  });
    // set of control points
    this.obj = [ this.p1, this.p2, this.pt1, this.pt2 ];
    for (var part of this.obj) { part.ref = this.P} // ref point for local system
    if (this.state == "active") { this.activate(this) }
    if (this.state == "inactive") { this.deactivate(this) }
    if (this.state == "locked") { 
      this.deactivate(this); this.state = "locked" ;  this.graph.setAttribute({strokeColor:'black'} ); }
    if (this.state == "pure") { 
      this.deactivate(this); this.state = "pure" ;  
      this.graph.setAttribute({strokeColor:'black'} );  this.graph.setAttribute({strokewidth: 2});  this.graph.setAttribute({highlight: false} ); 
      this.v1.setAttribute({visible: false}); this.v2.setAttribute({visible: false}); this.v3.setAttribute({visible: false}); 
      this.t1.setAttribute({visible: false}); this.t2.setAttribute({visible: false});
      }
   
    //switch by doubleclick
    this.graph.parent = this;
    this.graph.lastclick = Date.now();    
    this.graph.on('up', function() {
      if (Date.now()-this.lastclick < 500) {console.log(this.parent.state); this.parent.switch()}
      else {this.lastclick = Date.now() }})
  }
  switch() {if (this.state == "active") { this.deactivate(this)}
      else if (this.state == "inactive") { this.activate(this);}
      console.log(this.state)}
  activate(ref) {console.log("this.activate()"); ref.state = "active";
        for (var part of ref.obj) {
          part.setAttribute({visible:true});
          part.setAttribute({fixed:false});
          part.setAttribute({snapToGrid:true});
        } update()}
  deactivate(ref) {console.log("this.deactivate()"); ref.state = "inactive";
        for (var part of ref.obj) {
          part.setAttribute({visible:false});
          part.setAttribute({fixed:true});
        } update()}

  data() {  return [
      "spline",
      this.d[1],
      this.d[2],
      minus([this.p1.X(),this.p1.Y()], this.d[2]),
      minus([this.p2.X(),this.p2.Y()], this.d[2]),
      minus([this.pt1.X(),this.pt1.Y()], this.d[2]),
      minus([this.pt2.X(),this.pt2.Y()], this.d[2]),
      this.style,
      this.state
    ];  }
  name() { return hermitename(this.P,this.p1, this.p2, this.pt1, this.pt2) }
}

// initialization
var objects = [];
init();

update();

board.on('update', function() {
  update()
});

function init() {
  stateInput = document.getElementById(stateRef);
  if (stateInput.value && stateInput.value != '') {
    console.log(stateInput.value); state = JSON.parse(stateInput.value); } else { state = JSON.parse({#init#});
 }
  var m;
  for (m of state) {
    console.log(m);
    switch (m[0]) {
      case "crosshair": objects.push(new crosshair(m)); break;
      case "dir": objects.push(new dir(m)); break;
      case "force": objects.push(new force(m)); break;
      case "grid":  objects.push(new grid(m)); break;
      case "label":  objects.push(new label(m)); break;
      case "moment":  objects.push(new moment(m)); break;
      case "spline":  objects.push(new spline(m)); break;
    }
  }
}

function update() {
  var m;
  var dfield = [];
 var names ="[";
  for (m of objects) {
    dfield.push(m.data());
    if (names != "[") { names = names.concat(",")  }
    names = names.concat(m.name()); 
  }
  stateInput.value = JSON.stringify(dfield);
  names=names.concat("]");
  document.getElementById(fbd_names).value=names;

}
function plus(a,b) { return [ a[0]+b[0], a[1]+b[1] ] }
function minus(a,b) { return [ a[0]-b[0], a[1]-b[1] ] }
function hermite(x1,dx,y1,dy,d1,d2) {
  if (!isNaN(d1) && !isNaN(d2)) {
    // cubic spline
    var c0 = (dx**3*y1+(2*dy+(-d2-d1)*dx)*x1**3+(3*dx*dy+(-d2-2*d1)*dx**2)*x1**2-d1*dx**3*x1)/(dx**3);
    var c1 = -((6*dy+(-3*d2-3*d1)*dx)*x1**2+(6*dx*dy+(-2*d2-4*d1)*dx**2)*x1-d1*dx**3)/(dx**3);
    var c2 = ((6*dy+(-3*d2-3*d1)*dx)*x1+3*dx*dy+(-d2-2*d1)*dx**2)/(dx**3);
    var c3 = -(2*dy+(-d2-d1)*dx)/(dx**3); }
  if (isNaN(d1) && !isNaN(d2)) {
    // parabola with 2 points and slope at right point
    var c0 = (dx**2*y1+(d2*dx-dy)*x1**2+(d2*dx**2-2*dx*dy)*x1)/(dx**2);
    var c1 = ((2*dy-2*d2*dx)*x1+2*dx*dy-d2*dx**2)/(dx**2);
    var c2 = -(dy-d2*dx)/(dx**2);
    var c3 = 0;}
  if (!isNaN(d1) && isNaN(d2)) {
    // parabola with 2 points and slope at left point
    var c0 = (dx**2*y1+(dy-d1*dx)*x1**2-d1*dx**2*x1)/(dx**2);
    var c1 = -((2*dy-2*d1*dx)*x1-d1*dx**2)/(dx**2);
    var c2 = (dy-d1*dx)/(dx**2);
    var c3 = 0;}
  if (isNaN(d1) && isNaN(d2)) {
    // straight segment thru 2 points
    var c0 = (dx*y1-dy*x1)/dx;
    var c1 = dy/dx;
    var c2 = 0;
    var c3 = 0;}
  return [c0, c1, c2, c3];
}
function hermiteplot(Ref,p1, p2, t1, t2) {
  var fct = function(x) {
    const tol = 0.09; // min x-range for tangent lines
    var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    var x1 = p1.X()-Ref[0], dx = p2.X()-p1.X();
    var y1 = p1.Y()-Ref[1], dy = p2.Y()-p1.Y();
    var d1 = (p1.Y()-t1.Y())/(p1.X()-t1.X());
    if (Math.abs(p1.X()-t1.X())<tol) {d1 = NaN};
    var d2 = (p2.Y()-t2.Y())/(p2.X()-t2.X());
    if (Math.abs(p2.X()-t2.X())<tol) {d2 = NaN};
    var c = hermite(x1,dx,y1,dy,d1,d2);
    var s = Ref[1]+c[3]*(x-Ref[0])**3+c[2]*(x-Ref[0])**2+c[1]*(x-Ref[0])+c[0];
    return  s
  }
  return fct; 
};
function hermitename(Ref,p1, p2, t1, t2) {
  const tol = 0.09; // min x-range for tangent lines
  var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
  var x1 = p1.X()-Ref[0], dx = p2.X()-p1.X();
  var y1 = p1.Y()-Ref[1], dy = p2.Y()-p1.Y();
  var d1 = (p1.Y()-t1.Y())/(p1.X()-t1.X());
  var d2 = (p2.Y()-t2.Y())/(p2.X()-t2.X());
  var c = hermite(x1,dx,y1,dy,d1,d2);
  if (!isNaN(c[0]+c[1]+c[2]+c[3])) {
    var n = c[3].toFixed(3) + "*x^3+" + c[2].toFixed(3) + "*x^2+" + c[1].toFixed(3) + "*x+" + c[0].toFixed(3);
    return n.replace(/\+\-/g,"-")  }
  else {return "NaN"}
};
[[/jsxgraph]]</p>

<p>In einem Zugversuch wurde das dargestellte Spannungs-Dehnungs-Diagramm für ein Kunststoffmaterial ermittelt.</p>
<p>Zu bestimmen ist die bleibende Länge \(\ell_p\) einer Probe mit der Anfangslänge \(\ell_0={@l0@}\,\mathrm{cm}\), die bis zu einer Dehnung von \(\varepsilon_\max={@eps@}\%\) belastet und dann entlastet wurde. Dabei wird angenommen, dass das Material sich elastisch-plastisch verhält und im elastischen Bereich linear ist.</p>
<p>Bestimmen Sie den E-Modul und die Spannung bei maximaler Dehnung aus dem Diagramm. Benutzen Sie das blaue Fadenkreuz zum Ablesen der Koordinaten.</p>
<p>\(E=\) [[input:S_Emodul]] [[validation:S_Emodul]] [[feedback:Emodul]] </p>
<p>\( \sigma(\varepsilon_\max)=\) [[input:S_sig]] [[validation:S_sig]] [[feedback:sig]] </p>
<p>Berechnen Sie nun die bleibende Dehnung und die bleibende Länge des Stabes nach der Entlastung:</p>
<p>\(\varepsilon_p=\) [[input:S_ep]]% [[validation:S_ep]] [[feedback:ep]] </p>
<p>\(l_p=\) [[input:S_lp]] [[validation:S_lp]] [[feedback:lp]] </p>]]></text>
<file name="Hib-2-3-12.png" path="/" encoding="base64"></file>
    </questiontext>
    <generalfeedback format="html">
      <text>Der E-Modul ergibt sich aus dem Quotient von Spannung und Dehnung eines Punkts auf der elastischen Geraden. Beim Ablesen ist zu beachten:
- Ist der Punkt zu weit unten, wird der Wert ungenau, weil die Zahlen klein sind.
- Ist der Punkt zu weit oben, wird der Wert ungenau, weil man die elastische Gerade verlässt und in den plastischen Bereich reinkommt. Den Übergang kann man bei diesem Material nur sehr schlecht erkennen.

Die Spannung bei maximaler Dehnung wird einfach für den gegebenen Dehnungswert abgelesen.

Daraus kann man mit dem E-Modul die elastische Dehnung berechnen. Diese muss man von der gegebenen Gesamtdehnung abziehen, um die plastische (bleibende) Dehnung zu erhalten.

Plastische Dehnung mal Anfangslänge liefert dann die bleibende Längenänderung. Damit ergibt sich dann auch die bleibende Länge als Anfangslänge plus Längenänderung.</text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2020120600</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[
de0: 0.4;
ds0: rand_with_step(15,20,1);
de1:0.4;
ds1: ds0/(3*de0)*de1;
de2: rand_with_step(3.5,4.5,0.1);
ds2: rand_with_step(4,6,1);
T: ds0/de0*rand_with_step(0.1,0.15, 0.01)
l0: rand_with_step(5,8,1);
eps: rand_with_step(de0+de1,de0+de1+de2,0.1);

Emodul: ds0/de0*100;


/* iMecLib objects */
fx: 0.5; fy: 5
p0:[0,0];
p1:[de0/fx,ds0/fy];
p2: p1+[de1/fx, ds1/fy];
p3: p2+[de2/fx, ds2/fy];
p4: p3+[1/fx, T/fy];
y(x):=a*x^3+b*x^2+c*x+d;
maxy: p3[2]+1;
maxx: p3[1]+1;
initdata: [ 
  [ "grid", " ", " ", -0.5,maxx, -1, maxy, 40, [fx, fy] ],
  [ "label", "\\(\\sigma \\) in MPa", [0.6,maxy-0.5] ],
  [ "label", "\\(\\varepsilon \\) in %", [maxx-0.9,0] ],  
  [ "spline", "eqn", p0, p0, p1, p0, p1, "", "pure"],
  [ "spline", "eqn", p0, p1, p2, p0, p2+[1,0], "", "pure"],
  [ "spline", "eqn", p0, p2, p3, p2+[1,0], p4, "", "pure"],
  [ "crosshair", "", [2,2], [0,0], [fx,fy], [2,1] ]
];
init: stackjson_stringify(float(initdata));

[a,b,c,d]: ev([a,b,c,d], solve([ y(p2[1])=p2[2], y(p3[1])=p3[2], at(diff(y(x),x),x=p2[1])=0, at(diff(y(x),x),x=p3[1])=T*fx/fy], [a,b,c,d]));
sig: fy*y(eps/fx);
ep: eps-sig/Emodul*100;
lp: l0*(1+ep/100);
]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text></text>
    </specificfeedback>
    <questionnote>
      <text> \(l_0={@l0@}\,\mathrm{cm}\),  \(\varepsilon={@eps@}\%\) {@[ds0, ds2,de2,T]@} E-Modul    {@Emodul@} Sig {@sig@}</text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<p>Richtig.</p>]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<p>Ihre Antwort ist teilweise korrekt.</p>]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<p>Falsch.</p>]]></text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>names</name>
      <type>algebraic</type>
      <tans>[]</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <input>
      <name>objects</name>
      <type>string</type>
      <tans>init</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <input>
      <name>S_Emodul</name>
      <type>units</type>
      <tans>Emodul*MPa</tans>
      <boxsize>8</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>Zahl mit Einheit</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <input>
      <name>S_ep</name>
      <type>numerical</type>
      <tans>ep</tans>
      <boxsize>6</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint>Zahl</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <input>
      <name>S_lp</name>
      <type>units</type>
      <tans>lp*cm</tans>
      <boxsize>8</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>Zahl mit Einheit</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <input>
      <name>S_sig</name>
      <type>units</type>
      <tans>sig*MPa</tans>
      <boxsize>8</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>Zahl mit Einheit</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>Emodul</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>UnitsRelative</answertest>
        <sans>S_Emodul</sans>
        <tans>Emodul*MPa</tans>
        <testoptions>0.05</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Emodul-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Emodul-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[&nbsp;Abweichung > 5% .]]></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>ep</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>NumRelative</answertest>
        <sans>S_ep</sans>
        <tans>ep</tans>
        <testoptions>0.05</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>ep-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>ep-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[&nbsp;Abweichung > 5% .]]></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>lp</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>UnitsRelative</answertest>
        <sans>S_lp</sans>
        <tans>lp*cm</tans>
        <testoptions>0.005</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>lp-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>lp-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[&nbsp;Abweichung > 0.5% .]]></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>sig</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>UnitsRelative</answertest>
        <sans>S_sig</sans>
        <tans>sig*MPa</tans>
        <testoptions>0.01</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>sig-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>sig-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[&nbsp;Abweichung > 1%.]]></text>
        </falsefeedback>
      </node>
    </prt>
    <qtest>
      <testcase>1</testcase>
    </qtest>
    <qtest>
      <testcase>2</testcase>
    </qtest>
    <tags>
      <tag><text>numerisch</text>
</tag>
      <tag><text>Fragetest</text>
</tag>
    </tags>
  </question>

</quiz>