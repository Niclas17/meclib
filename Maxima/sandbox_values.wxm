/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 17.10.0 ] */
/* [wxMaxima: title   start ]
STACK Sandbox
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
This workbook allows you to use the STACK libraries with desktop Maxima.
See https://docs.stack-assessment.org/en/CAS/STACK-Maxima_sandbox
The source code is at https://github.com/maths/moodle-qtype_stack

1. Clone/downlod the source code of STACK.  E.g. https://github.com/maths/moodle-qtype_stack/archive/master.zip
2. Set your operating system with the variable maximaplatform. For Windows set it to "win".
3. Set the stacklocation variable below to the location of the STACK source code you downloaded, e.g. c:/tmp/stackroot
4. Specify a directory for temporary working files, e.g. /tmp or C:/tmp

[Directories in 2 & 3 can be the same if you don't mind clutter.]

Note that plots *will not work* in this sandbox.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* For MS platforms you normally need to explicitly set the path.
   This assumes you have cloned/downloaed the STACK code into c:/tmp/stackroot
   E.g. this file must exist c:/tmp/stackroot/stackmaxima.mac 

   Use the forward slash as a directory seperator.
   No trailing slash.
*/
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot"$
stacktmplocation:"c:/tmp"$

/*maximaplatform:"linux"$
stacklocation:"."$
stacktmplocation:"/tmp"$
*/

/****************************************************
   There should be no need to edit below this line.  
   
   These commands add the location to Maxima's search path. 
*/
file_search_maxima:append( [sconcat(stacklocation, "/stack/maxima/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacklocation, "/stack/maxima/###.{lisp}")] , file_search_lisp)$
file_search_maxima:append( [sconcat(stacktmplocation, "/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacktmplocation, "/###.{lisp}")] , file_search_lisp)$

/* 
   The following command may be slightly different on your particular server.
   There is normally no need to change this.  You can see this function on the STACK healtcheck page (moodle admin access only).
*/
STACK_SETUP(ex):=block(
    MAXIMA_VERSION_NUM_EXPECTED:0,
    MAXIMA_PLATFORM:maximaplatform,
    maxima_tempdir:"",
    IMAGE_DIR:"",
    PLOT_SIZE:[450,300],
    PLOT_TERMINAL:"svg",
    PLOT_TERM_OPT:"dynamic font \",11\" linewidth 1.2",
    DEL_CMD:"rm",
    GNUPLOT_CMD:"gnuplot",
    MAXIMA_VERSION_EXPECTED:"default",
    URL_BASE:"!ploturl!",
    /* Define units available in STACK. */
    stack_unit_si_prefix_code:[y, z, a, f, p, n, u, m, c, d, da, h, k, M, G, T, P, E, Z, Y],
    stack_unit_si_prefix_multiplier:[10^-24, 10^-21, 10^-18, 10^-15, 10^-12, 10^-9, 10^-6, 10^-3, 10^-2, 10^-1, 10, 10^2, 10^3, 10^6, 10^9, 10^12, 10^15, 10^18, 10^21, 10^24],
    stack_unit_si_prefix_tex:["\\mathrm{y}", "\\mathrm{z}", "\\mathrm{a}", "\\mathrm{f}", "\\mathrm{p}", "\\mathrm{n}", "\\mu ", "\\mathrm{m}", "\\mathrm{c}", "\\mathrm{d}", "\\mathrm{da}", "\\mathrm{h}", "\\mathrm{k}", "\\mathrm{M}", "\\mathrm{G}", "\\mathrm{T}", "\\mathrm{P}", "\\mathrm{E}", "\\mathrm{Z}", "\\mathrm{Y}"],
    stack_unit_si_unit_code:[m, l, L, g, t, s, h, Hz, Bq, cd, N, Pa, cal, Cal, Btu, eV, J, W, Wh, A, ohm, C, V, F, S, Wb, T, H, Gy, rem, Sv, lx, lm, mol, M, kat, rad, sr, K, VA, eV, Ci],
    stack_unit_si_unit_conversions:[m, m^3/1000, m^3/1000, kg/1000, 1000*kg, s, s*3600, 1/s, 1/s, cd, (kg*m)/s^2, kg/(m*s^2), 4.2*J, 4200*J, 1055*J, 1.602177e-19*J, (kg*m^2)/s^2, (kg*m^2)/s^3, 3600*(kg*m^2)/s^2, A, (kg*m^2)/(s^3*A^2), s*A, (kg*m^2)/(s^3*A), (s^4*A^2)/(kg*m^2), (s^3*A^2)/(kg*m^2), (kg*m^2)/(s^2*A), kg/(s^2*A), (kg*m^2)/(s^2*A^2), m^2/s^2, 0.01*Sv, m^2/s^2, cd/m^2, cd, mol, mol/(m^3/1000), mol/s, rad, sr, K, (kg*m^2)/(s^3), 1.602176634E-19*J, Ci],
    stack_unit_si_unit_tex:["\\mathrm{m}", "\\mathrm{l}", "\\mathrm{L}", "\\mathrm{g}", "\\mathrm{t}", "\\mathrm{s}", "\\mathrm{h}", "\\mathrm{Hz}", "\\mathrm{Bq}", "\\mathrm{cd}", "\\mathrm{N}", "\\mathrm{Pa}", "\\mathrm{cal}", "\\mathrm{cal}", "\\mathrm{Btu}", "\\mathrm{eV}", "\\mathrm{J}", "\\mathrm{W}", "\\mathrm{Wh}", "\\mathrm{A}", "\\Omega", "\\mathrm{C}", "\\mathrm{V}", "\\mathrm{F}", "\\mathrm{S}", "\\mathrm{Wb}", "\\mathrm{T}", "\\mathrm{H}", "\\mathrm{Gy}", "\\mathrm{rem}", "\\mathrm{Sv}", "\\mathrm{lx}", "\\mathrm{lm}", "\\mathrm{mol}", "\\mathrm{M}", "\\mathrm{kat}", "\\mathrm{rad}", "\\mathrm{sr}", "\\mathrm{K}", "\\mathrm{VA}", "\\mathrm{eV}", "\\mathrm{Ci}"],
    stack_unit_other_unit_code:[min, amu, u, mmHg, bar, ha, cc, gal, mbar, atm, torr, rev, deg, rpm, au, Da, Np, B, dB, day, year, hp, in, ft, yd, mi, lb],
    stack_unit_other_unit_conversions:[s*60, amu, amu, 133.322387415*Pa, 10^5*Pa, 10^4*m^2, m^3*10^(-6), 3.785*l, 10^2*Pa, 101325*Pa, 101325/760*Pa, 2*pi*rad, pi*rad/180, pi*rad/(30*s), 149597870700*m, 1.660539040E-27*kg, Np, B, dB, 86400*s, 3.156e7*s, 746*W, in, 12*in, 36*in, 5280*12*in, 4.4482*N],
    stack_unit_other_unit_tex:["\\mathrm{min}", "\\mathrm{amu}", "\\mathrm{u}", "\\mathrm{mmHg}", "\\mathrm{bar}", "\\mathrm{ha}", "\\mathrm{cc}", "\\mathrm{gal}", "\\mathrm{mbar}", "\\mathrm{atm}", "\\mathrm{torr}", "\\mathrm{rev}", "\\mathrm{{}^{o}}", "\\mathrm{rpm}", "\\mathrm{au}", "\\mathrm{Da}", "\\mathrm{Np}", "\\mathrm{B}", "\\mathrm{dB}", "\\mathrm{day}", "\\mathrm{year}", "\\mathrm{hp}", "\\mathrm{in}", "\\mathrm{ft}", "\\mathrm{yd}", "\\mathrm{mi}", "\\mathrm{lb}"],
    true)$

/* Load the main libraries. */
load("stackmaxima.mac")$
load("stats")$
load("distrib")$
load("descriptive")$
print(sconcat("[ STACK-Maxima started, library version ", stackmaximaversion, " ]"))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* Optional but useful. */
display2d:true;
simp:true;
debug:false;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* https://github.com/mkraska/meclib/wiki/fb_vars */
fb_strip_list(_list_of_things):= _list_of_things[1];

fb_vars(%_sans,%_tans, [%_opt] ) := block([%_vars, %_label,%_tansvar,%_sansvar,%_extras, %_missing, simp, %_txt, %_L],
    simp: true, /* Extract vars with simp:true does mean that "x/x+y" -> [y] */
    if length(%_opt)>0 then %_vars: %_opt[1] else %_vars: [], 
    if length(%_opt)>1 then %_label: %_opt[2] else %_label: "",
    %_txt: %_label,
    %_sansvar: setify(listofvars(%_sans)),
    %_tansvar: setify(listofvars(%_tans)),
    /* Say nothing is tans is free of vars (e.g. because it is zero) */
    if emptyp(%_tansvar) then return(""),
    /* Check for spurious (extra) vars */
    %_extras: setdifference(%_sansvar, %_tansvar),
    if length(%_extras) > 0 then (
      %_txt: castext_concat(%_txt, "&nbsp;Unerwartete Variable: " ),
      %_txt: castext_concat(%_txt, fb_strip_list(listify(%_extras)) ),
      %_txt: castext_concat(%_txt, "."  ) ),
    /* Check for missing vars */
    %_missing: setdifference(%_tansvar, %_sansvar),
    if length(%_missing) > 0 then  (
      %_txt: castext_concat(%_txt, "&nbsp;Fehlende Variable: " ),
      %_txt: castext_concat(%_txt, fb_strip_list(listify(%_missing)) ),
      %_txt: castext_concat(%_txt,  castext(" (<code>{@stack_disp_comma_separate(listify(%_missing))@}</code>)." ))),
    if %_txt # %_label then return(%_txt),
    /* if set of vars is ok, then check for the terms with vars from given list (%_vars). */ 
    %_L: sublist (%_vars, lambda ([x], diff(%_sans-%_tans, x)#0)),
    if length(%_L)=0 then return(%_txt),
    if length(%_L)=1 then return( castext_concat (%_txt, castext("&nbsp;Pr&uuml;fen Sie den Term mit {@%_L[1]@}.") ) ),
    %_txt: castext_concat( %_txt, "&nbsp;Pr&uuml;fen Sie die Terme mit " ), 
    %_txt: castext_concat( %_txt, fb_strip_list(%_L) ), 
    castext_concat(%_txt, "." ) 
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_vars(N*l/(A*E),N*l/(A*E));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
length([]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
stack_var_makelist(k, 5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
rest(stack_var_makelist(k, 6));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
texput(kg, "\\rm kg");
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
kg;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
tex(kg);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
units: [l=l*LE, E=E*ME/(LE*ZE^2), N=N*ME*LE/ZE^2, A=A*LE^2];
sans: N*l/(E*A);
rat(subst(units, sans)/sans*LE);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
rat(subst(units, sans)/sans);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
map("=", [N, E, A, l], [ME*LE/ZE^2, ME/(LE*ZE^2), LE^2, LE]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
vars:[N, E, A, l];
units: [ME*LE/ZE^2, ME/(LE*ZE^2), LE^2, LE];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
map("=", vars,map("*", vars, units));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_dim(res, _vars, dims):=rat(subst(map("=", _vars,map("*", _vars, units)),res)/res);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
test:fb_dim((N+E)/(E*A+E*l), vars,units);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
listofvars(test);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_number(%_snum, %_tnum, %_tol) := block([%_oom, %_mnt, %_d],
  /* if tol=0 just indicate deviation */
  simp: true,
  if %_tol=0 and %_tnum # 0 then return(sconcat("&nbsp;Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")),
  /* special feedback if teacher's answer is zero */
  if %_tnum+1.0=1.0  then 
     if %_snum+1.0=1.0 then return("&nbsp;Abweichung: 0") 
     else return("&nbsp;Der Wert ist betragsm&auml;&szlig;ig zu gro&szlig;."),
  /* say nothing if student's answer is zero (further down log() might fail) */
  if %_snum = 0 then return(""), 
  /* check of the sign */
  if %_snum/%_tnum <0 then return("&nbsp;Pr&uuml;fen Sie das Vorzeichen."),
  /* go back if error is less than tolerance */
  if abs((%_snum-%_tnum)/%_tnum) < %_tol then return(sconcat("&nbsp;Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")), 
  /* OoM and mantissa error */
  %_oom: log(abs(%_snum/%_tnum))/log(10),
  %_mnt: 10^( %_oom - round(%_oom)),
  /* Mantissa check */
  if abs(1-%_mnt) <%_tol and abs(%_oom)>0.1 then 
    return("&nbsp;Die Mantisse stimmt, die Zehnerpotenz weicht aber um mindestens eine Gr&ouml;&szlig;enordnung ab. Pr&uuml;fen Sie Ihre Einheitenumrechnung. ") 
  /* general hint on precision */
  else(
    %_d: float(abs((1-abs(%_snum)/abs(%_tnum)))*100),  /* % Abweichung */
    %_oom:10^round(log(%_d)/log(10.)-0.5),
    %_d: float(round(floor(%_d/%_oom)))*%_oom,
    if %_d>=1 then %_d:round(%_d),
    if abs(%_snum)<abs(%_tnum) then        
        return(sconcat("&nbsp;Der Betrag ist um mindestens ", %_d , "% zu klein.")) else
        return(sconcat("&nbsp;Der Betrag ist um mindestens ", %_d , "% zu gro&szlig;."))       
  ), 
[%_snum,%_tnum] );

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_number(10.366,1.366,0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(%_sans, %_tans, %_tol) := block([%_snum, %_tnum, %_oom, %_mnt, %_d],
  /* extract numbers and units */
  %_snum: float(simplify(stack_units_nums(stack_unit_si_to_si_base(%_sans)))),
  if %_snum = NULLNUM then %_snum:1.0, 
  %_tnum: float(simplify(stack_units_nums(stack_unit_si_to_si_base(%_tans)))),
  if %_tnum = NULLNUM then %_tnum:1.0, 
  %_sunit: stack_units_units(stack_unit_si_to_si_base(%_sans)),
  if %_sunit = NULLUNITS then %_sunit:1,  /* display as 1 if not correct */
  /* complain if units don't match */
  if %_sunit # %_tunit then return(
    castext_concat("&nbsp;Unerwartete Basiseinheit: ", castext("{@(stack_disp_fractions(\"i\"),%_sunit)@}"  )  )),   
  /* if tol=0 just indicate deviation */
  if %_tol=0 and %_tnum # 0 then return(sconcat("&nbsp;Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")),
  /* special feedback if teacher's answer is zero */
  if %_tnum+1.0=1.0  then return("&nbsp;Der Wert ist betragsm&auml;&szlig;ig zu gro&szlig;."),
  /* say nothing if student's answer is zero (further down log() might fail) */
  if %_snum = 0 then return(""),
  /* check of the sign */
  if %_snum/%_tnum <0 then return("&nbsp;Pr&uuml;fen Sie das Vorzeichen."),
  /* go back if error is less than tolerance */
  if abs((%_snum-%_tnum)/%_tnum) < %_tol then return(sconcat("&nbsp;Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")), 
  /* OoM and mantissa error */
  %_oom: log(abs(%_snum/%_tnum))/log(10),
  %_mnt: 10^( %_oom - round(%_oom)),
  /* Mantissa check */
  if abs(1-%_mnt) <%_tol and abs(%_oom)>0.1 then 
    return("&nbsp;Die Mantisse stimmt, die Zehnerpotenz weicht aber um mindestens eine Gr&ouml;&szlig;enordnung ab. Pr&uuml;fen Sie Ihre Einheitenumrechnung. ") 
  /* general hint on precision */
  else(
    %_d: float(abs((1-abs(%_snum)/abs(%_tnum)))*100),  /* % Abweichung */
    %_oom:10^round(log(%_d)/log(10.)-0.5),
    %_d: float(round(floor(%_d/%_oom)))*%_oom,
    if %_d>=1 then %_d:round(%_d),
    if abs(%_snum)<abs(%_tnum) then        
        return(sconcat("&nbsp;Der Betrag ist um mindestens ", %_d , "% zu klein.")) else
        return(sconcat("&nbsp;Der Betrag ist um mindestens ", %_d , "% zu gro&szlig;."))       
  ), 
[%_snum,%_tnum] );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(0,0,0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(0,0*m,0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(0*s,stackunits(0,m),0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(0 ,stackunits(0,m),0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(1*m,0,0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(0*m,2*s,0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(s,2*s,0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(3*s,2*s,0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fb_unit(20*s,2*s,0.005);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
1.0+0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
simp:true;float(1.0+0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
stack_unit_si_to_si_base(0*kg);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
display2d:false;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
debug:false;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
float(simplify(1.0/2.0));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
float(log(10));
/* [wxMaxima: input   end   ] */



/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
