/* https://github.com/mkraska/meclib/wiki/Feedback-Overview */
/* 2022 08 03                           */

/* https://github.com/mkraska/meclib/wiki/fb_vars */
fb_vars(%_sans,%_tans, [%_opt] ) := block([%_vars, %_label, %_tansvar,%_sansvar,%_extras, %_missing,simp, %_txt, %_L],
    if length(%_opt)>0 then %_vars: %_opt[1] else %_vars: [], 
    if length(%_opt)>1 then %_label: %_opt[2] else %_label: "",
    %_txt: %_label,
    simp: true, /* Extract vars with simp:true does mean that "x/x+y" -> [y] */
    %_sansvar: setify(listofvars(%_sans)),
    %_tansvar: setify(listofvars(%_tans)),
    /* Say nothing if tans is free of vars (e.g. because it is zero) */
    if emptyp(%_tansvar) then return(""),
    /* Check for spurious (extra) vars */
    %_extras: setdifference(%_sansvar, %_tansvar),
    if length(%_extras) > 0 then 
    %_txt: sconcat(%_txt," Unerwartete Variable: \\(", stack_disp_comma_separate(listify(%_extras)), "\\)." ),
    /* Check for missing vars */
    %_missing: setdifference(%_tansvar, %_sansvar),
    if length(%_missing) > 0 then 
    %_txt: sconcat(%_txt," Fehlende Variable: \\(", stack_disp_comma_separate(listify(%_missing)), "\\) (<code>", stack_disp_comma_separate(listify(%_missing)), "</code>)."  ),
    /* if set of vars is ok, then check for the terms with vars from given list (%_vars). */ 
    if %_txt # %_label then return(sconcat(%_txt, "<br>")),
    %_L: sublist (%_vars, lambda ([x], diff(%_sans-%_tans, x)#0)),
    if length(%_L)=0 then return( ""),
    if length(%_L)=1 then return(sconcat(%_label," Pr&uuml;fen Sie den Term mit \\(", %_L[1], "\\).<br>")),
    return(sconcat(%_label," Pr&uuml;fen Sie die Terme mit \\(",stack_disp_comma_separate(%_L ), "\\).<br>")),
  "" );

/* https://github.com/mkraska/meclib/wiki/fb_number */  
fb_number(%_snum, %_tnum, %_tol) := block([%_oom, %_mnt, %_d],
  /* if tol=0 just indicate deviation */
  if %_tol=0 and %_tnum # 0 then return(sconcat(" Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")),
  /* special feedback if teacher's answer is zero */
  if %_tnum+1.0=1.0  then 
     if %_snum+1.0=1.0 then return("Abweichung: 0") 
     else return(" Der Wert ist betragsm&auml;&szlig;ig zu gro&szlig;."),
  /* check of the sign */
  if %_snum/%_tnum <0 then return(" Pr&uuml;fen Sie das Vorzeichen."),
  /* go back if error is less than tolerance */
  if abs((%_snum-%_tnum)/%_tnum) < %_tol then return(sconcat(" Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")), 
  /* OoM and mantissa error */
  %_oom: log(abs(%_snum/%_tnum))/log(10),
  %_mnt: 10^( %_oom - round(%_oom)),
  /* Mantissa check */
  if abs(1-%_mnt) <%_tol and abs(%_oom)>0.1 then 
    return(" Die Mantisse stimmt, die Zehnerpotenz weicht aber um mindestens eine Gr&ouml;&szlig;enordnung ab. Pr&uuml;fen Sie Ihre Einheitenumrechnung. ") 
  /* general hint on precision */
  else(
    %_d: float(abs((1-abs(%_snum)/abs(%_tnum)))*100),  /* % Abweichung */
    %_oom:10^round(log(%_d)/log(10.)-0.5),
    %_d: float(round(floor(%_d/%_oom)))*%_oom,
    if %_d>=1 then %_d:round(%_d),
    if abs(%_snum)<abs(%_tnum) then        
        return(sconcat(" Der Betrag ist um mindestens ", %_d , "% zu klein.")) else
        return(sconcat(" Der Betrag ist um mindestens ", %_d , "% zu gro&szlig;."))       
  ), 
[%_snum,%_tnum] );

/* https://github.com/mkraska/meclib/wiki/fb_unit */
fb_unit(%_sans, %_tans, %_tol) := block([%_snum, %_tnum, %_oom, %_mnt, %_d],
  %_snum: stack_units_nums(stack_unit_si_to_si_base(%_sans)),
  %_tnum: stack_units_nums(stack_unit_si_to_si_base(%_tans)),
  /* if tol=0 just indicate deviation */
  if %_tol=0 and %_tnum # 0 then return(sconcat(" Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")),
  /* special feedback if teacher's answer is zero */
  if %_tnum+1.0=1.0  then return(" Der Wert ist betragsm&auml;&szlig;ig zu gro&szlig;."),
  /* check of the sign */
  if %_snum/%_tnum <0 then return(" Pr&uuml;fen Sie das Vorzeichen."),
  /* go back if error is less than tolerance */
  if abs((%_snum-%_tnum)/%_tnum) < %_tol then return(sconcat(" Abweichung: ", float( round((%_snum-%_tnum)/abs(%_tnum)*1000)/10) , "%")), 
  /* OoM and mantissa error */
  %_oom: log(abs(%_snum/%_tnum))/log(10),
  %_mnt: 10^( %_oom - round(%_oom)),
  /* Mantissa check */
  if abs(1-%_mnt) <%_tol and abs(%_oom)>0.1 then 
    return(" Die Mantisse stimmt, die Zehnerpotenz weicht aber um mindestens eine Gr&ouml;&szlig;enordnung ab. Pr&uuml;fen Sie Ihre Einheitenumrechnung. ") 
  /* general hint on precision */
  else(
    %_d: float(abs((1-abs(%_snum)/abs(%_tnum)))*100),  /* % Abweichung */
    %_oom:10^round(log(%_d)/log(10.)-0.5),
    %_d: float(round(floor(%_d/%_oom)))*%_oom,
    if %_d>=1 then %_d:round(%_d),
    if abs(%_snum)<abs(%_tnum) then        
        return(sconcat(" Der Betrag ist um mindestens ", %_d , "% zu klein.")) else
        return(sconcat(" Der Betrag ist um mindestens ", %_d , "% zu gro&szlig;."))       
  ), 
[%_snum,%_tnum] );